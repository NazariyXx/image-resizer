{"version":3,"sources":["components/ImageSelector/index.js","components/ImageResizer/Option/index.js","assets/icons/settings.svg","components/ImageResizer/index.js","components/App/index.js","index.js"],"names":["ImageSelector","props","onSelect","className","withIcon","withLabel","buttonText","onChange","imgExtension","maxFileSize","buttonClassName","fileContainerStyle","backgroundColor","boxShadow","padding","Option","property","value","minValue","htmlFor","type","pattern","min","id","Number","toString","ImageResizer","source","useState","width","setWidth","height","setHeight","positionX","setPositionX","positionY","setPositionY","widthRatio","setWidthRatio","heightRatio","setHeightRatio","naturalWidth","setNaturalWidth","naturalHeight","setNaturalHeight","showOptions","setShowOptions","imageRef","useRef","canvasRef","updateDimensions","useCallback","current","useEffect","window","addEventListener","removeEventListener","widthHandler","target","parseInt","validity","valid","posX","Math","round","heightHandler","posY","positionXHandler","positionYHandler","onLoad","areaWidth","areaHeight","cropImage","context","getContext","clearRect","drawImage","croppedImageUrl","toDataURL","link","document","createElement","href","setAttribute","body","appendChild","click","parentNode","removeChild","toggleOptions","prevShowOptions","useMemo","areaPositionX","areaPositionY","ref","src","alt","style","transform","onClick","SettingsIcon","App","imageSource","setImageSource","pictures","URL","createObjectURL","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2a768451.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageUploader from 'react-images-upload';\n\nimport './style.scss';\n\nconst ImageSelector = (props) => {\n  const { onSelect } = props;\n\n  return (\n    <div className='image-selector'>\n      <h1>Crop IMAGE</h1>\n      <p>Crop <b>JPG</b> or <b>PNG</b> by defining a rectangle in pixels.</p>\n      <p>Cut your image online.</p>\n      <ImageUploader\n        withIcon={false}\n        withLabel={false}\n        buttonText='Select image'\n        onChange={onSelect}\n        imgExtension={['.jpg', '.png']}\n        maxFileSize={5242880}\n        buttonClassName='select-image-btn'\n        fileContainerStyle={{\n          backgroundColor: '#f3f0ec',\n          boxShadow: 'none',\n          padding: 0,\n        }}\n      />\n    </div>\n  );\n};\n\nImageSelector.propTypes = {\n  onSelect: PropTypes.func,\n};\n\nexport default ImageSelector;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './style.scss';\n\nconst Option = (props) => {\n  const { property, onChange, value, minValue } = props;\n\n  return (\n    <div className='option'>\n      <label htmlFor={property}>{property} (px)</label>\n      <input\n        type='number'\n        pattern='[0-9]*'\n        min={minValue}\n        id={property}\n        value={Number(value).toString()}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\nOption.propTypes = {\n  property: PropTypes.string,\n  onChange: PropTypes.func,\n  value: PropTypes.number,\n  minValue: PropTypes.number,\n};\n\nexport default Option;\n","export default __webpack_public_path__ + \"static/media/settings.ea975a85.svg\";","import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Option from './Option';\n\nimport SettingsIcon from '../../assets/icons/settings.svg';\n\nimport './style.scss';\n\nconst ImageResizer = (props) => {\n  const { source } = props;\n\n  // Form input values\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [positionX, setPositionX] = useState(0);\n  const [positionY, setPositionY] = useState(0);\n\n  // Transformation ratios for drawing UI area similar to natural sizes\n  const [widthRatio, setWidthRatio] = useState(0);\n  const [heightRatio, setHeightRatio] = useState(0);\n\n  // Actual sizes of image\n  const [naturalWidth, setNaturalWidth] = useState(0);\n  const [naturalHeight, setNaturalHeight] = useState(0);\n\n  const [showOptions, setShowOptions] = useState(false);\n\n  const imageRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Updating ratios each time window was resized\n  const updateDimensions = useCallback(\n    () => {\n      if (imageRef.current) {\n        setWidthRatio(imageRef.current.width * 100 / imageRef.current.naturalWidth);\n        setHeightRatio(imageRef.current.height * 100 / imageRef.current.naturalHeight);\n      }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    window.addEventListener('resize', updateDimensions);\n\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n    };\n  }, [updateDimensions]);\n\n  const widthHandler = useCallback(\n    ({ target }) => {\n      const value = parseInt(target.value, 10);\n      const min = parseInt(target.min, 10);\n\n      if (target.validity.valid) {\n        if (value >= min) {\n          if (value <= naturalWidth) {\n            setWidth(value);\n\n            const posX = Math.round(naturalWidth - value);\n\n            if (positionX > posX) {\n              setPositionX(posX);\n            }\n          } else {\n            setWidth(naturalWidth);\n            setPositionX(Math.round(0));\n          }\n        } else {\n          setWidth(min);\n        }\n      }\n    },\n    [naturalWidth, positionX],\n  );\n\n  const heightHandler = useCallback(\n    ({ target }) => {\n      const value = parseInt(target.value, 10);\n      const min = parseInt(target.min, 10);\n\n      if (target.validity.valid) {\n        if (value >= min) {\n          if (value <= naturalHeight) {\n            setHeight(value);\n\n            const posY = Math.round(naturalHeight - value);\n\n            if (positionY > posY) {\n              setPositionY(posY);\n            }\n          } else {\n            setHeight(naturalHeight);\n            setPositionY(0);\n          }\n        } else {\n          setHeight(min);\n        }\n      }\n    },\n    [naturalHeight, positionY],\n  );\n\n  const positionXHandler = useCallback(\n    ({ target }) => {\n      const value = parseInt(target.value, 10);\n      const min = parseInt(target.min, 10);\n\n      if (target.validity.valid) {\n        if (value >= min) {\n          if (value <= naturalWidth - width) {\n            setPositionX(value);\n          } else {\n            setPositionX(Math.round(naturalWidth - width));\n          }\n        } else {\n          setPositionX(min);\n        }\n      }\n    },\n    [naturalWidth, width],\n  );\n\n  const positionYHandler = useCallback(\n    ({ target }) => {\n      const value = parseInt(target.value, 10);\n      const min = parseInt(target.min, 10);\n\n      if (target.validity.valid) {\n        if (value >= min) {\n          if (value <= naturalHeight - height) {\n            setPositionY(value);\n          } else {\n            setPositionY(Math.round(naturalHeight - height));\n          }\n        } else {\n          setPositionY(min);\n        }\n      }\n    },\n    [naturalHeight, height],\n  );\n\n  const onLoad = useCallback(\n    () => {\n      const { width: areaWidth, height: areaHeight, naturalWidth, naturalHeight } = imageRef.current;\n      const width = Math.round(naturalWidth * 80 / 100);\n      const height = Math.round(naturalHeight * 80 / 100);\n\n      setWidth(width);\n      setHeight(height);\n      setNaturalWidth(naturalWidth);\n      setNaturalHeight(naturalHeight);\n      setPositionX(Math.round((naturalWidth - width) / 2));\n      setPositionY(Math.round((naturalHeight - height) / 2));\n      setWidthRatio(areaWidth * 100 / naturalWidth);\n      setHeightRatio(areaHeight * 100 / naturalHeight);\n    },\n    [],\n  );\n\n  const cropImage = useCallback(\n    () => {\n      if (canvasRef.current) {\n        const context = canvasRef.current.getContext('2d');\n\n        // Refreshing canvas cropped image\n        context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n        context.drawImage(\n          imageRef.current,\n          positionX,\n          positionY,\n          width,\n          height,\n          0,\n          0,\n          canvasRef.current.width,\n          canvasRef.current.height,\n        );\n\n        // Url ready to download cropped image\n        const croppedImageUrl = canvasRef.current.toDataURL('image/jpg', 90);\n        const link = document.createElement('a');\n\n        link.href = croppedImageUrl;\n        link.setAttribute(\n          'download',\n          `w-${width}-h-${height}`,\n        );\n\n        // Append to html link element page\n        document.body.appendChild(link);\n\n        // Start download\n        link.click();\n\n        // Clean up and remove the link\n        link.parentNode.removeChild(link);\n      }\n    },\n    [positionX, positionY, width, height],\n  );\n\n  const toggleOptions = useCallback(\n    () => {\n      setShowOptions((prevShowOptions) => !prevShowOptions);\n    },\n    [],\n  );\n  // Transforming natural numbers into UI compatible\n  const areaWidth = useMemo(() => width * widthRatio / 100, [width, widthRatio]);\n  const areaHeight = useMemo(() => height * heightRatio / 100, [height, heightRatio]);\n  const areaPositionX = useMemo(() => positionX * widthRatio / 100, [positionX, widthRatio]);\n  const areaPositionY = useMemo(() => positionY * heightRatio / 100, [positionY, heightRatio]);\n\n  return (\n    <div className='image-resizer'>\n      <div className='editable-area'>\n        <div className='image-container'>\n          <img ref={imageRef} className='image' src={source} onLoad={onLoad} alt='Resizable area' />\n          <canvas ref={canvasRef} width={width} height={height}></canvas>\n          <div className='crop-area' style={{\n            width: areaWidth,\n            height: areaHeight,\n            transform: `translate(${areaPositionX}px, ${areaPositionY}px)`,\n          }}></div>\n        </div>\n      </div>\n\n      <div className={`options-menu-toggler ${showOptions ? 'options-menu-toggler-active' : ''}`}>\n        <img onClick={toggleOptions} src={SettingsIcon} />\n      </div>\n\n      <div className={`options-menu ${showOptions ? 'options-menu-active' : ''}`}>\n        <h2>Crop options</h2>\n\n        <Option\n          property='Width'\n          value={width}\n          onChange={widthHandler}\n          minValue={1}\n        />\n        <Option\n          property='Height'\n          value={height}\n          onChange={heightHandler}\n          minValue={1}\n        />\n        <Option\n          property='Position X'\n          value={positionX}\n          onChange={positionXHandler}\n          minValue={0}\n        />\n        <Option\n          property='Position Y'\n          value={positionY}\n          onChange={positionYHandler}\n          minValue={0}\n        />\n      </div>\n\n      <button className='crop-image-btn' onClick={cropImage}>Crop IMAGE</button>\n    </div>\n  );\n};\n\nImageResizer.propTypes = {\n  source: PropTypes.string,\n};\n\nexport default ImageResizer;\n","import React, { useState } from 'react';\n\nimport ImageSelector from '../ImageSelector';\nimport ImageResizer from '../ImageResizer';\n\nimport './style.scss';\n\nconst App = () => {\n  const [imageSource, setImageSource] = useState('');\n\n  const onDrop = pictures => {\n    setImageSource(URL.createObjectURL(pictures[0]));\n  };\n\n  return (\n    <div className=\"app\">\n      {imageSource ? (\n        <ImageResizer source={imageSource} />\n      ) : (\n        <ImageSelector onSelect={onDrop} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}